// Code generated by informer-gen. DO NOT EDIT.

package v1beta1

import (
	"context"
	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	addonv1beta1 "open-cluster-management.io/api/addon/v1beta1"
	versioned "open-cluster-management.io/api/client/addon/clientset/versioned"
	internalinterfaces "open-cluster-management.io/api/client/addon/informers/externalversions/internalinterfaces"
	v1beta1 "open-cluster-management.io/api/client/addon/listers/addon/v1beta1"
)

// ClusterManagementAddOnInformer provides access to a shared informer and lister for
// ClusterManagementAddOns.
type ClusterManagementAddOnInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1beta1.ClusterManagementAddOnLister
}

type clusterManagementAddOnInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClusterManagementAddOnInformer constructs a new informer for ClusterManagementAddOn type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterManagementAddOnInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterManagementAddOnInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterManagementAddOnInformer constructs a new informer for ClusterManagementAddOn type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterManagementAddOnInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.AddonV1beta1().ClusterManagementAddOns().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.AddonV1beta1().ClusterManagementAddOns().Watch(context.TODO(), options)
			},
		},
		&addonv1beta1.ClusterManagementAddOn{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterManagementAddOnInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterManagementAddOnInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *clusterManagementAddOnInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&addonv1beta1.ClusterManagementAddOn{}, f.defaultInformer)
}

func (f *clusterManagementAddOnInformer) Lister() v1beta1.ClusterManagementAddOnLister {
	return v1beta1.NewClusterManagementAddOnLister(f.Informer().GetIndexer())
}
