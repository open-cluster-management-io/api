// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
	scheme "open-cluster-management.io/api/client/cluster/clientset/versioned/scheme"
	v1 "open-cluster-management.io/api/cluster/v1"
)

// ManagedClustersGetter has a method to return a ManagedClusterInterface.
// A group's client should implement this interface.
type ManagedClustersGetter interface {
	ManagedClusters() ManagedClusterInterface
}

// ManagedClusterInterface has methods to work with ManagedCluster resources.
type ManagedClusterInterface interface {
	Create(ctx context.Context, managedCluster *v1.ManagedCluster, opts metav1.CreateOptions) (*v1.ManagedCluster, error)
	Update(ctx context.Context, managedCluster *v1.ManagedCluster, opts metav1.UpdateOptions) (*v1.ManagedCluster, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, managedCluster *v1.ManagedCluster, opts metav1.UpdateOptions) (*v1.ManagedCluster, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ManagedCluster, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ManagedClusterList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ManagedCluster, err error)
	ManagedClusterExpansion
}

// managedClusters implements ManagedClusterInterface
type managedClusters struct {
	*gentype.ClientWithList[*v1.ManagedCluster, *v1.ManagedClusterList]
}

// newManagedClusters returns a ManagedClusters
func newManagedClusters(c *ClusterV1Client) *managedClusters {
	return &managedClusters{
		gentype.NewClientWithList[*v1.ManagedCluster, *v1.ManagedClusterList](
			"managedclusters",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1.ManagedCluster { return &v1.ManagedCluster{} },
			func() *v1.ManagedClusterList { return &v1.ManagedClusterList{} }),
	}
}
