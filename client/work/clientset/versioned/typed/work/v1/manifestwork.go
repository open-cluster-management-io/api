// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
	scheme "open-cluster-management.io/api/client/work/clientset/versioned/scheme"
	v1 "open-cluster-management.io/api/work/v1"
)

// ManifestWorksGetter has a method to return a ManifestWorkInterface.
// A group's client should implement this interface.
type ManifestWorksGetter interface {
	ManifestWorks(namespace string) ManifestWorkInterface
}

// ManifestWorkInterface has methods to work with ManifestWork resources.
type ManifestWorkInterface interface {
	Create(ctx context.Context, manifestWork *v1.ManifestWork, opts metav1.CreateOptions) (*v1.ManifestWork, error)
	Update(ctx context.Context, manifestWork *v1.ManifestWork, opts metav1.UpdateOptions) (*v1.ManifestWork, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, manifestWork *v1.ManifestWork, opts metav1.UpdateOptions) (*v1.ManifestWork, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ManifestWork, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ManifestWorkList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ManifestWork, err error)
	ManifestWorkExpansion
}

// manifestWorks implements ManifestWorkInterface
type manifestWorks struct {
	*gentype.ClientWithList[*v1.ManifestWork, *v1.ManifestWorkList]
}

// newManifestWorks returns a ManifestWorks
func newManifestWorks(c *WorkV1Client, namespace string) *manifestWorks {
	return &manifestWorks{
		gentype.NewClientWithList[*v1.ManifestWork, *v1.ManifestWorkList](
			"manifestworks",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.ManifestWork { return &v1.ManifestWork{} },
			func() *v1.ManifestWorkList { return &v1.ManifestWorkList{} }),
	}
}
